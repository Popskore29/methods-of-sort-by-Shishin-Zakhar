Сортировка выбором 
#include <algorithm> // для std::swap

// Шаблонная функция для сортировки выбором
template <typename T>
void selectionSort(T arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        // Находим индекс минимального элемента в неотсортированной части
        int minIndex = i;
        for (int j = i + 1; j < size; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Меняем местами найденный минимальный элемент с первым неотсортированным
        if (minIndex != i) {
            std::swap(arr[i], arr[minIndex]);
        }
    }
}
Пример использования 
#include <iostream>
#include <algorithm>

using namespace std;

// Функция сортировки выбором
void selectionSort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        // Находим индекс минимального элемента
        int minIndex = i;
        for (int j = i + 1; j < size; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Меняем местами
        if (minIndex != i) {
            swap(arr[i], arr[minIndex]);
        }
    }
}

// Функция для вывода массива
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int numbers[] = {64, 25, 12, 22, 11};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    
    cout << "Исходный массив: ";
    printArray(numbers, size);
    
    selectionSort(numbers, size);
    
    cout << "Отсортированный массив: ";
    printArray(numbers, size);
    
    return 0;
}
_______
